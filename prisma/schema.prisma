generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String
  email            String    @unique
  emailVerified    Boolean   @default(false)
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  role             String?
  banned           Boolean?  @default(false)
  banReason        String?
  banExpires       DateTime?
  subscriptionTier String?

  // WhatsApp
  whatsapp String? @unique // ex: 556182493200 (sem + e sem espaços e sem o nono digito)

  // Campos adicionais para integração Yampi
  temporaryPassword String? // Senha temporária para primeiro acesso
  phone             String? // Número de telefone completo
  cpf               String? // CPF do usuário

  // Recursos pedagógicos
  resourceAccess UserResourceAccess[]
  subscription   Subscription?

  accounts          Account[]
  invitations       Invitation[]       @relation("UserInvitations")
  members           Member[]
  notifications     Notification[]
  pushSubscriptions PushSubscription[]
  sessions          Session[]

  @@map("user")
}

model Session {
  id                   String   @id @default(cuid())
  expiresAt            DateTime
  token                String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  ipAddress            String?
  userAgent            String?
  userId               String
  impersonatedBy       String?
  activeOrganizationId String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId, providerId])
  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([identifier])
  @@map("verification")
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  slug        String?      @unique
  logo        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  metadata    String?
  invitations Invitation[]
  members     Member[]

  @@map("organization")
}

model Member {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  role           String
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("member")
}

model Invitation {
  id             String       @id @default(cuid())
  organizationId String
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  token          String       @unique
  user           User         @relation("UserInvitations", fields: [inviterId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([email])
  @@map("invitation")
}

model Notification {
  id          String    @id @default(cuid())
  userId      String
  title       String
  body        String
  icon        String?
  image       String?
  badge       String?
  data        Json?
  type        String
  category    String?
  read        Boolean   @default(false)
  readAt      DateTime?
  clickAction String?
  sentAt      DateTime  @default(now())
  expiresAt   DateTime?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@map("notification")
}

model PushSubscription {
  id         String   @id @default(cuid())
  userId     String
  endpoint   String   @unique
  p256dh     String
  auth       String
  userAgent  String?
  deviceName String?
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  lastUsedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, p256dh]) // evita duplicidade do mesmo device por usuário
  @@index([userId])
  @@index([active])
  @@map("push_subscription")
}

// =========================================
// Modelos para Recursos Pedagógicos
// =========================================

// Modelo de Recurso Educacional
model Resource {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  imageUrl    String
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isFree      Boolean  @default(false)

  // Relacionamentos
  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])

  educationLevelId String
  educationLevel   EducationLevel @relation(fields: [educationLevelId], references: [id])

  files            ResourceFile[]
  accesses         UserResourceAccess[]
  externalMappings ExternalProductMapping[]
  bnccCodes        ResourceBNCCCode[]

  @@index([subjectId])
  @@index([educationLevelId])
  @@index([isFree])
  @@map("resource")
}

// Arquivos de recursos (múltiplos arquivos por recurso)
model ResourceFile {
  id          String   @id @default(cuid())
  fileName    String
  fileType    String
  // Para links do Google Drive inicialmente
  externalUrl String?
  // Para futura integração com S3/Supabase storage
  storageKey  String?
  createdAt   DateTime @default(now())

  // Relacionamento
  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@index([resourceId])
  @@map("resource_file")
}

// Modelo de Disciplina (personalizável)
model Subject {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  
  resources Resource[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  BNCCCode  BNCCCode[]

  @@map("subject")
}

// Modelo de Nível de Ensino (personalizável)
model EducationLevel {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  ageRange  String? // ex: "0-5 anos"
  resources Resource[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  BNCCCode  BNCCCode[]

  @@map("education_level")
}

// Acesso do usuário aos recursos
model UserResourceAccess {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  resourceId String
  resource   Resource  @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  grantedAt  DateTime  @default(now())
  expiresAt  DateTime? // Data de expiração do acesso (null = acesso vitalício)
  isActive   Boolean   @default(true) // Se o acesso está ativo ou foi revogado
  metadata   Json? // Dados da transação (orderId, transactionId, etc)

  @@unique([userId, resourceId])
  @@index([userId])
  @@index([resourceId])
  @@index([expiresAt])
  @@index([isActive])
  @@map("user_resource_access")
}

// Assinatura premium
model Subscription {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isActive      Boolean  @default(true)
  purchaseDate  DateTime @default(now())
  // Acesso vitalício, sem data de expiração
  transactionId String? // Para referência de pagamento

  @@map("subscription")
}

model ExternalProductMapping {
  id          String   @id @default(cuid())  
  productId   String? // ID do produto na plataforma externa  
  store       String? // Nome da Loja
  resourceId  String
  resource    Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([resourceId])
  @@map("external_product_mapping")
}

// Modelo para códigos BNCC
model BNCCCode {
  id               String   @id @default(cuid())
  code             String   @unique
  description      String   @db.Text
  subjectId        String
  educationLevelId String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relacionamentos
  subject        Subject            @relation(fields: [subjectId], references: [id])
  educationLevel EducationLevel     @relation(fields: [educationLevelId], references: [id])
  resources      ResourceBNCCCode[]

  @@index([code])
  @@index([subjectId])
  @@index([educationLevelId])
  @@map("bncc_code")
}

// Relação muitos-para-muitos entre Recursos e Códigos BNCC
model ResourceBNCCCode {
  id         String @id @default(cuid())
  resourceId String
  bnccCodeId String

  // Relacionamentos
  resource Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  bnccCode BNCCCode @relation(fields: [bnccCodeId], references: [id], onDelete: Cascade)

  @@unique([resourceId, bnccCodeId])
  @@index([resourceId])
  @@index([bnccCodeId])
  @@map("resource_bncc_code")
}
