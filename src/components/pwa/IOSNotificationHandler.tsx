'use client';

import { useEffect, useState } from 'react';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';

// Defini√ß√£o de tipos
type NotificationPermissionState = 'granted' | 'denied' | 'default';
type WindowWithStandalone = Window & {
  MSStream?: unknown;
};

type NavigatorWithStandalone = Navigator & {
  standalone?: boolean;
};

export function IOSNotificationHandler() {
  const [isIOSStandalone, setIsIOSStandalone] = useState(false);
  const [showPermissionDialog, setShowPermissionDialog] = useState(false);
  // Removido o uso da vari√°vel permissionState, mantendo apenas o setter
  const [, setPermissionState] = useState<NotificationPermissionState | null>(null);

  useEffect(() => {
    // Detectar se √© iOS
    const isIOS = () => {
      return /iPad|iPhone|iPod/.test(navigator.userAgent) && !(window as WindowWithStandalone).MSStream;
    };

    // Detectar se est√° em modo standalone (adicionado √† tela inicial)
    const isInStandaloneMode = () => {
      return (
        window.matchMedia('(display-mode: standalone)').matches ||
        (window.navigator as NavigatorWithStandalone).standalone === true
      );
    };

    // Verificar se √© iOS e est√° em modo standalone
    const checkIOSStandalone = () => {
      if (isIOS() && isInStandaloneMode()) {
        console.log('üì± Aplicativo sendo executado como PWA no iOS');
        setIsIOSStandalone(true);
        
        // No iOS, esperamos um pouco para mostrar o di√°logo ap√≥s o app ser carregado como PWA
        setTimeout(() => {
          checkNotificationPermission();
        }, 2000);
      }
    };

    // Verificar o estado atual da permiss√£o de notifica√ß√£o
    const checkNotificationPermission = async () => {
      if (!('Notification' in window)) {
        console.log('Este navegador n√£o suporta notifica√ß√µes desktop');
        return;
      }

      const permission = Notification.permission as NotificationPermissionState;
      setPermissionState(permission);
      
      // Se a permiss√£o ainda n√£o foi decidida, mostrar di√°logo
      if (permission === 'default') {
        setShowPermissionDialog(true);
      }
    };

    // Executar verifica√ß√£o inicial
    checkIOSStandalone();

    // Adicionar listener para detectar quando o app √© adicionado √† tela inicial
    const handleDisplayModeChange = (event: MediaQueryListEvent) => {
      if (event.matches && isIOS()) {
        setIsIOSStandalone(true);
        checkNotificationPermission();
      }
    };

    // Adicionar listener para mudan√ßas no modo de exibi√ß√£o
    const mediaQuery = window.matchMedia('(display-mode: standalone)');
    mediaQuery.addEventListener('change', handleDisplayModeChange);

    // Cleanup
    return () => {
      mediaQuery.removeEventListener('change', handleDisplayModeChange);
    };
  }, []);

  // Fun√ß√£o para solicitar permiss√£o de notifica√ß√£o
  const requestNotificationPermission = async () => {
    if (!('Notification' in window)) {
      console.log('Este navegador n√£o suporta notifica√ß√µes desktop');
      return;
    }

    try {
      const permission = await Notification.requestPermission() as NotificationPermissionState;
      setPermissionState(permission);
      setShowPermissionDialog(false);
      
      // Se a permiss√£o foi concedida, registrar para notifica√ß√µes push
      if (permission === 'granted') {
        registerForPushNotifications();
      }
    } catch (error) {
      console.error('Erro ao solicitar permiss√£o para notifica√ß√µes:', error);
    }
  };

  // Registrar para notifica√ß√µes push
  const registerForPushNotifications = async () => {
    if ('serviceWorker' in navigator && 'PushManager' in window) {
      try {
        // Removida a atribui√ß√£o √† vari√°vel registration que n√£o era utilizada
        await navigator.serviceWorker.ready;
        
        // Aqui voc√™ pode implementar a l√≥gica para registrar o dispositivo no seu backend
        // para receber notifica√ß√µes push
        console.log('‚úÖ Pronto para receber notifica√ß√µes push no iOS');
        
        // Exemplo de como registrar no backend (implementar conforme necess√°rio)
        // const swRegistration = await navigator.serviceWorker.ready;
        // await fetch('/api/notifications/register-device', {
        //   method: 'POST',
        //   headers: { 'Content-Type': 'application/json' },
        //   body: JSON.stringify({ 
        //     token: await swRegistration.pushManager.getSubscription() 
        //   }),
        // });
      } catch (error) {
        console.error('‚ùå Erro ao registrar para notifica√ß√µes push:', error);
      }
    }
  };

  // N√£o renderizar nada se n√£o for iOS em modo standalone
  if (!isIOSStandalone) {
    return null;
  }

  return (
    <Dialog open={showPermissionDialog} onOpenChange={setShowPermissionDialog}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Receba notifica√ß√µes importantes</DialogTitle>
          <DialogDescription>
            Permita notifica√ß√µes para receber atualiza√ß√µes importantes sobre suas atividades e novidades no Kadernim.
          </DialogDescription>
        </DialogHeader>
        <DialogFooter>
          <Button variant="outline" onClick={() => setShowPermissionDialog(false)}>
            Agora n√£o
          </Button>
          <Button onClick={requestNotificationPermission}>
            Permitir notifica√ß√µes
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
